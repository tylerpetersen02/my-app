AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Resolver Declaration Proxy Template

Parameters:
  ApiId:
    Type: String
    Description: The API ID
  DataSourceName:
    Type: String
    Description: The data source name
  Environment:
    Type: String
    Description: The current project name, environment, and branch (ex. proj_stage_main)
  SecretArn:
    Type: String
    Description: The secret for AppSync API access
  DatabaseName:
    Type: String
    Description: The main database name
  ClusterName:
    Type: String
    Description: The cluster name (all data sources)

Resources:
  MutationRDSRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /service-role/
      RoleName: !Sub ${Environment}_Mutation_RDS_Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - appsync.amazonaws.com
            Action:
              - "sts:AssumeRole"

  MutationRDSPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub ${Environment}_Mutation_RDS_Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "lambda:InvokeFunction"
              - "logs:CreateLogGroup"
            Resource: "*"
          - Effect: Allow
            Action:
              - rds-data:*
            Resource: "*"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource:
              - !Ref SecretArn
      Roles:
        - !Ref MutationRDSRole

  # GET PLAYER TOTAL WINS
  AddScoresFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${Environment}_Add_Scores
      Runtime: nodejs14.x
      Role: !GetAtt MutationRDSRole.Arn
      Handler: add-scores.handler
      Code: ./Add_Scores
      Environment:
        Variables:
          DATABASENAME: !Ref DatabaseName
          SECRETARN: !Ref SecretArn
          CLUSTERARN: !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${ClusterName}"

  AddScoresDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !Ref ApiId
      Name: !Sub ${Environment}_Lambda_Add_Scores
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt MutationRDSRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AddScoresFunction.Arn

  AddScoresPipeline:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !Ref ApiId
      TypeName: "Mutation"
      FieldName: "addScores"
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - !GetAtt AddScores.FunctionId
      RequestMappingTemplateS3Location: ./Add_Scores/before.vtl
      ResponseMappingTemplateS3Location: ./Add_Scores/after.vtl

  AddScores:
    Type: "AWS::AppSync::FunctionConfiguration"
    Properties:
      ApiId: !Ref ApiId
      Name: "Add_Scores"
      Description: "Adds player scores for all rounds of overall round for game type"
      DataSourceName: !GetAtt AddScoresDataSource.Name
      FunctionVersion: "2018-05-29"
      RequestMappingTemplateS3Location: ./Add_Scores/request.vtl
      ResponseMappingTemplateS3Location: ./Add_Scores/response.vtl

  # ActionResolverTemplate:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     TemplateURL: ./Action/resolvers-action-template.yaml
  #     Parameters:
  #       ApiId: !Ref ApiId
  #       DataSourceName: !Ref DataSourceName

  # GetCtaByActionIdAndUserIdPipeline:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     TemplateURL: ./Call_To_Action/Get_Cta_By_Action_Id_And_User_Id/get-cta-by-action-id-and-user-id.yaml
  #     Parameters:
  #       ApiId: !Ref ApiId
  #       DataSourceName: !Ref DataSourceName
  #       Environment: !Ref Environment
  #       DatabaseName: !Ref DatabaseName
  #       SecretArn: !Ref SecretArn
  #       ClusterName: !Ref ClusterName
